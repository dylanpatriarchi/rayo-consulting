---
import { getLangFromUrl, useTranslatedPath, useTranslations } from "@i18n/utils";

const { class: className } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<!-- The best thing? It's all in one -->
<div id="rayo-motto" class:list={["section motto-section gap-y-20 py-12 sm:py-16 md:py-20 text-xl md:text-2xl", className]}>
	<div class="col-span-full text-center px-4 sm:px-6 md:px-8">
		<h2 id="animated-subtitle" class="font-sans text-sm sm:text-base font-bold uppercase tracking-wider text-white opacity-0">
			{t("services.tagline")}
		</h2>
		<p id="animated-tagline" class="mt-4 text-2xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold leading-tight text-white opacity-0 max-w-5xl mx-auto">
			{t("hero.tagline")}
		</p>
	</div>
</div>

<style></style>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import { SplitText } from "gsap/SplitText";

	gsap.registerPlugin(ScrollTrigger, SplitText);

	function init() {
		// Split text into words for stagger animation
		const subtitleSplit = new SplitText("#animated-subtitle", { type: "words,chars" });
		const taglineSplit = new SplitText("#animated-tagline", { type: "words,chars" });

		// Set initial state for subtitle words
		gsap.set(subtitleSplit.words, {
			opacity: 0,
			y: 20,
			rotateX: 90,
			transformOrigin: "50% 50%"
		});

		// Set initial state for tagline words
		gsap.set(taglineSplit.words, {
			opacity: 0,
			y: 30,
			scale: 0.9,
			rotateY: 10,
			transformOrigin: "50% 50%"
		});

		// Animate subtitle
		gsap.to(subtitleSplit.words, {
			opacity: 1,
			y: 0,
			rotateX: 0,
			duration: 0.4,
			ease: "power2.out",
			stagger: 0.02,
			scrollTrigger: {
				trigger: "#animated-subtitle",
				start: "top 85%",
				end: "bottom 15%",
				toggleActions: "play none none reverse",
			}
		});

		// Show subtitle container
		gsap.to("#animated-subtitle", {
			opacity: 1,
			duration: 0.05,
			scrollTrigger: {
				trigger: "#animated-subtitle",
				start: "top 85%",
				end: "bottom 15%",
				toggleActions: "play none none reverse",
			}
		});

		// Animate tagline with delay
		gsap.to(taglineSplit.words, {
			opacity: 1,
			y: 0,
			scale: 1,
			rotateY: 0,
			duration: 0.5,
			ease: "power2.out",
			stagger: 0.03,
			scrollTrigger: {
				trigger: "#animated-tagline",
				start: "top 80%",
				end: "bottom 20%",
				toggleActions: "play none none reverse",
			}
		});

		// Show tagline container
		gsap.to("#animated-tagline", {
			opacity: 1,
			duration: 0.05,
			scrollTrigger: {
				trigger: "#animated-tagline",
				start: "top 80%",
				end: "bottom 20%",
				toggleActions: "play none none reverse",
			}
		});

		// Add a subtle hover effect for the tagline
		const taglineElement = document.querySelector("#animated-tagline");
		if (taglineElement) {
			taglineElement.addEventListener("mouseenter", () => {
				gsap.to(taglineSplit.words, {
					scale: 1.02,
					duration: 0.15,
					ease: "power2.out",
					stagger: 0.01
				});
			});

			taglineElement.addEventListener("mouseleave", () => {
				gsap.to(taglineSplit.words, {
					scale: 1,
					duration: 0.15,
					ease: "power2.out",
					stagger: 0.01
				});
			});
		}
	}

	document.removeEventListener("DOMContentLoaded", init);
	document.addEventListener("DOMContentLoaded", init);
</script>

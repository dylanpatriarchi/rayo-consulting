---
import Title from "@components/global/Title.astro";
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
// const t = useTranslations(lang);
// const translatePath = useTranslatedPath(lang);
---

<section class="section min-h-screen">
	<div class="col-span-full">
			<Title 
				title={lang === "it" ? "Contatti" : "Contact"} 
				subtitle={lang === "it" ? "Parliamo del tuo progetto" : "Let's discuss your project"} 
			class="pt-20 pb-16 text-center" 
			/>
		</div>

	<div class="col-span-full">
		<div class="contact-layout">
			<!-- Contact Information -->
			<div class="contact-info">
				<h2 class="contact-section-title">
					{lang === "it" ? "Informazioni" : "Information"}
					</h2>
					
				<div class="contact-cards">
						<!-- Email -->
					<div class="contact-card">
						<div class="contact-icon">
							<span>@</span>
							</div>
						<div class="contact-details">
							<h3 class="contact-label">Email</h3>
							<a href="mailto:info@rayoconsulting.org" class="contact-value">
									info@rayoconsulting.org
								</a>
							</div>
						</div>

						<!-- Instagram -->
					<div class="contact-card">
						<div class="contact-icon">
							<span>IG</span>
							</div>
						<div class="contact-details">
							<h3 class="contact-label">Instagram</h3>
							<a href="https://instagram.com/rayo.consulting" target="_blank" class="contact-value">
									@rayo.consulting
								</a>
							</div>
						</div>

						<!-- Location -->
					<div class="contact-card">
						<div class="contact-icon">
							<span>üìç</span>
							</div>
						<div class="contact-details">
							<h3 class="contact-label">
									{lang === "it" ? "Sede" : "Location"}
								</h3>
							<p class="contact-value">Citt√† di Castello, Italia</p>
						</div>
					</div>
				</div>
			</div>

			<!-- Chat Interface -->
			<div class="chat-container">
				<h2 class="contact-section-title">
					{lang === "it" ? "Chat Diretta" : "Live Chat"}
				</h2>
				
				<div class="chat-window">
					<!-- Chat Header -->
					<div class="chat-header">
						<div class="chat-controls">
							<div class="chat-dot red"></div>
							<div class="chat-dot yellow"></div>
							<div class="chat-dot green"></div>
						</div>
						<div class="chat-title">Rayo Consulting</div>
					</div>

					<!-- Chat Content -->
					<div class="chat-content">
						<!-- Messages Container -->
						<div id="messages-container" class="messages-container">
							<!-- Messages will be added here -->
						</div>

						<!-- Name Input (initially visible) -->
						<div id="name-input-container" class="input-container">
							<input 
								id="name-input"
								type="text" 
								placeholder={lang === "it" ? "Il tuo nome..." : "Your name..."}
								class="chat-input"
							>
							<button 
								id="name-submit"
								class="chat-button"
							>
								{lang === "it" ? "Conferma" : "Confirm"}
							</button>
						</div>

						<!-- Chat Input (initially hidden) -->
						<div id="chat-input-container" class="input-container hidden">
							<input 
								id="chat-input"
								type="text" 
								placeholder={lang === "it" ? "Scrivi un messaggio..." : "Type a message..."}
								class="chat-input"
							>
							<button 
								id="chat-submit"
								class="chat-button"
							>
								{lang === "it" ? "Invia" : "Send"}
							</button>
						</div>

						<!-- Loading indicator -->
						<div id="loading-indicator" class="loading-indicator hidden">
							<div class="loading-dots">
								<div class="loading-dot"></div>
								<div class="loading-dot"></div>
								<div class="loading-dot"></div>
							</div>
							<span>{lang === "it" ? "Digitando..." : "Typing..."}</span>
						</div>
					</div>
				</div>

				<!-- Chat Status -->
				<div class="chat-status">
					<div class="status-dot online"></div>
					<span>{lang === "it" ? "Online" : "Online"}</span>
				</div>
			</div>
		</div>
	</div>


</section>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		const nameInput = document.getElementById('name-input') as HTMLInputElement;
		const nameSubmit = document.getElementById('name-submit') as HTMLButtonElement;
		const nameInputContainer = document.getElementById('name-input-container') as HTMLDivElement;
		const chatInputContainer = document.getElementById('chat-input-container') as HTMLDivElement;
		const chatInput = document.getElementById('chat-input') as HTMLInputElement;
		const chatSubmit = document.getElementById('chat-submit') as HTMLButtonElement;
		const messagesContainer = document.getElementById('messages-container') as HTMLDivElement;
		const loadingIndicator = document.getElementById('loading-indicator') as HTMLDivElement;
		
		if (!nameInput || !nameSubmit || !nameInputContainer || !chatInputContainer || 
		    !chatInput || !chatSubmit || !messagesContainer || !loadingIndicator) {
			console.error('Missing required DOM elements for chat functionality');
			return;
		}
		
		let userName = '';
		const isItalian = document.documentElement.lang === 'it';

		// Add message to chat
		function addMessage(content: string, isUser = false, isError = false) {
			const messageWrapper = document.createElement('div');
			messageWrapper.className = 'mb-4';
			
			if (isUser) {
				// Messaggio utente - allineato a destra
				messageWrapper.innerHTML = `
					<div class="flex justify-end items-start gap-3">
						<div class="max-w-xs lg:max-w-md px-4 py-2 rounded-xl bg-white text-gray-900 font-sans text-sm">
							${content}
						</div>
						<div class="w-8 h-8 rounded-lg bg-white/90 border border-white/30 flex items-center justify-center text-xs font-semibold text-gray-900">
							${userName.substring(0, 2).toUpperCase()}
						</div>
					</div>
				`;
			} else {
				// Messaggio bot - allineato a sinistra
				const errorClass = isError ? 'bg-red-500/10 text-red-400 border-red-500/30' : 'bg-white/8 text-white border-white/10';
				messageWrapper.innerHTML = `
					<div class="flex justify-start items-start gap-3">
						<div class="w-8 h-8 rounded-lg bg-white/10 border border-white/20 flex items-center justify-center text-xs font-semibold text-white">
							RC
						</div>
						<div class="max-w-xs lg:max-w-md px-4 py-2 rounded-xl border font-sans text-sm ${errorClass}">
							${content}
						</div>
					</div>
				`;
			}
			
			messagesContainer.appendChild(messageWrapper);
			messagesContainer.scrollTop = messagesContainer.scrollHeight;
		}

		// Show loading indicator
		function showLoading() {
			loadingIndicator.classList.remove('hidden');
		}

		// Hide loading indicator
		function hideLoading() {
			loadingIndicator.classList.add('hidden');
		}

		// Send message to webhook
		async function sendMessage(userInput: string) {
			showLoading();
			
			try {
				const response = await fetch('https://dylanpatriarchi.app.n8n.cloud/webhook/chat', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						contactId: userName,
						userInput: userInput
					})
				});

				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`);
				}

				const data = await response.json();
				hideLoading();

				// Handle response
				if (data && data.length > 0 && data[0].output) {
					addMessage(data[0].output);
				} else {
					addMessage(
						isItalian 
							? 'Mi dispiace, non ho ricevuto una risposta valida.' 
							: 'Sorry, I didn\'t receive a valid response.',
						false, 
						true
					);
				}
			} catch (error) {
				console.error('Error sending message:', error);
				hideLoading();
				addMessage(
					isItalian 
						? 'Si √® verificato un errore. Riprova pi√π tardi.' 
						: 'An error occurred. Please try again later.',
					false, 
					true
				);
			}
		}

		// Handle name submission
		function handleNameSubmit() {
			const name = nameInput.value.trim();
			if (name) {
				userName = name;
				addMessage(name, true);
				
				// Switch to chat mode
				nameInputContainer.classList.add('hidden');
				chatInputContainer.classList.remove('hidden');
				
				// Add welcome message
				setTimeout(() => {
					addMessage(
						isItalian 
							? `Piacere di conoscerti, ${name}! Come posso aiutarti oggi?` 
							: `Nice to meet you, ${name}! How can I help you today?`
					);
				}, 500);
				
				chatInput.focus();
			}
		}

		// Handle chat message submission
		function handleChatSubmit() {
			const message = chatInput.value.trim();
			if (message) {
				addMessage(message, true);
				chatInput.value = '';
				sendMessage(message);
			}
		}

		// Event listeners
		nameSubmit.addEventListener('click', handleNameSubmit);
		nameInput.addEventListener('keypress', function(e) {
			if (e.key === 'Enter') {
				handleNameSubmit();
			}
		});

		chatSubmit.addEventListener('click', handleChatSubmit);
		chatInput.addEventListener('keypress', function(e) {
			if (e.key === 'Enter') {
				handleChatSubmit();
			}
		});

		// Add initial message
		addMessage(
			isItalian 
				? "Ciao! Come ti chiami?" 
				: "Hello! What's your name?"
		);

		// Focus on name input initially
		nameInput.focus();
	});
</script>

<style>
	.contact-layout {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 4rem;
		margin-bottom: 4rem;
		width: 100vw;
		margin-left: calc(-50vw + 50%);
		padding: 0 2rem;
	}

	.contact-info {
		text-align: center;
		max-width: 600px;
		width: 100%;
	}

	.chat-container {
		width: 100%;
		max-width: 600px;
	}

	.contact-section-title {
		font-size: 2rem;
		font-weight: bold;
		color: white;
		margin: 0 0 2rem 0;
		font-family: 'Inter', sans-serif;
		text-align: center;
	}

	.contact-cards {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.contact-card {
		display: flex;
		align-items: center;
		gap: 1rem;
		padding: 1.5rem;
		border: 1px solid rgba(255, 255, 255, 0.1);
		background: rgba(255, 255, 255, 0.02);
		border-radius: 1rem;
		transition: all 0.3s ease;
		cursor: pointer;
	}

	.contact-card:hover {
		border-color: rgba(255, 255, 255, 0.3);
		background: rgba(255, 255, 255, 0.05);
	}

	.contact-icon {
		width: 3rem;
		height: 3rem;
		border: 1px solid rgba(255, 255, 255, 0.2);
		border-radius: 0.75rem;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 1rem;
		color: white;
		flex-shrink: 0;
	}

	.contact-details {
		flex: 1;
		text-align: left;
	}

	.contact-label {
		font-family: 'Inter', sans-serif;
		font-size: 0.75rem;
		font-weight: 600;
		text-transform: uppercase;
		color: rgba(255, 255, 255, 0.6);
		margin: 0 0 0.25rem 0;
		letter-spacing: 0.05em;
	}

	.contact-value {
		font-family: 'Inter', sans-serif;
		font-size: 1.125rem;
		color: white;
		text-decoration: none;
		transition: color 0.3s ease;
		margin: 0;
	}

	.contact-value:hover {
		color: rgba(255, 255, 255, 0.8);
	}

	/* Chat Styles */
	.chat-window {
		border: 1px solid rgba(255, 255, 255, 0.1);
		background: rgba(0, 0, 0, 0.8);
		border-radius: 1rem;
		overflow: hidden;
	}

	.chat-header {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 1rem;
		border-bottom: 1px solid rgba(255, 255, 255, 0.1);
		background: rgba(255, 255, 255, 0.02);
	}

	.chat-controls {
		display: flex;
		gap: 0.5rem;
	}

	.chat-dot {
		width: 0.75rem;
		height: 0.75rem;
		border-radius: 50%;
	}

	.chat-dot.red { background: #ef4444; }
	.chat-dot.yellow { background: #eab308; }
	.chat-dot.green { background: #22c55e; }

	.chat-title {
		font-family: 'Inter', sans-serif;
		font-size: 0.875rem;
		font-weight: 600;
		text-transform: uppercase;
		color: white;
		letter-spacing: 0.05em;
	}

	.chat-content {
		padding: 1.5rem;
		height: 400px;
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.messages-container {
		flex: 1;
		overflow-y: auto;
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	/* Chat Messages - ora gestiti con Tailwind */

	.input-container {
		display: flex;
		gap: 0.75rem;
		align-items: center;
	}

	.chat-input {
		flex: 1;
		padding: 0.75rem 1rem;
		background: rgba(255, 255, 255, 0.05);
		border: 1px solid rgba(255, 255, 255, 0.1);
		border-radius: 0.5rem;
		color: white;
		font-family: 'Inter', sans-serif;
		font-size: 0.875rem;
		transition: border-color 0.3s ease;
	}

	.chat-input:focus {
		outline: none;
		border-color: rgba(255, 255, 255, 0.3);
	}

	.chat-input::placeholder {
		color: rgba(255, 255, 255, 0.5);
	}

	.chat-button {
		padding: 0.75rem 1.5rem;
		background: transparent;
		border: 1px solid rgba(255, 255, 255, 0.2);
		border-radius: 0.5rem;
		color: white;
		font-family: 'Inter', sans-serif;
		font-size: 0.875rem;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.05em;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.chat-button:hover {
		background: white;
		color: black;
		border-color: white;
	}

	.loading-indicator {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		color: rgba(255, 255, 255, 0.6);
		font-size: 0.875rem;
		font-family: 'Inter', sans-serif;
	}

	.loading-dots {
		display: flex;
		gap: 0.25rem;
	}

	.loading-dot {
		width: 0.5rem;
		height: 0.5rem;
		background: rgba(255, 255, 255, 0.6);
		border-radius: 50%;
		animation: bounce 1.4s infinite ease-in-out;
	}

	.loading-dot:nth-child(1) { animation-delay: -0.32s; }
	.loading-dot:nth-child(2) { animation-delay: -0.16s; }

	@keyframes bounce {
		0%, 80%, 100% { transform: scale(0); }
		40% { transform: scale(1); }
	}

	.chat-status {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		margin-top: 1rem;
		font-size: 0.875rem;
		color: rgba(255, 255, 255, 0.6);
		font-family: 'Inter', sans-serif;
		font-weight: 500;
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}

	.status-dot {
		width: 0.5rem;
		height: 0.5rem;
		border-radius: 50%;
	}

	.status-dot.online {
		background: #22c55e;
		animation: pulse 2s infinite;
	}

	@keyframes pulse {
		0% { opacity: 1; }
		50% { opacity: 0.5; }
		100% { opacity: 1; }
	}

	/* Desktop Layout */
	@media (min-width: 1024px) {
		.contact-layout {
			flex-direction: row;
			align-items: flex-start;
			justify-content: center;
			gap: 6rem;
			padding: 0 8rem;
		}

		.contact-info {
			text-align: left;
			flex-shrink: 0;
			width: 400px;
		}

		.contact-section-title {
			text-align: left;
		}

		.chat-container {
			flex: 1;
			max-width: 600px;
		}
	}

	/* Large Desktop */
	@media (min-width: 1400px) {
		.contact-layout {
			gap: 8rem;
			padding: 0 12rem;
		}
	}

	/* Mobile Responsive */
	@media (max-width: 768px) {
		.contact-layout {
			gap: 3rem;
		}

		.contact-section-title {
			font-size: 1.75rem;
		}

		.contact-card {
			padding: 1.25rem;
		}

		.contact-icon {
			width: 2.5rem;
			height: 2.5rem;
		}

		.contact-value {
			font-size: 1rem;
		}

		.chat-content {
			height: 350px;
			padding: 1rem;
		}
	}

	@media (max-width: 480px) {
		.contact-section-title {
			font-size: 1.5rem;
		}

		.contact-card {
			padding: 1rem;
		}

		.contact-value {
			font-size: 0.875rem;
		}

		.chat-content {
			height: 300px;
		}

		.input-container {
			flex-direction: column;
			gap: 0.5rem;
		}

		.chat-input, .chat-button {
			width: 100%;
		}
	}



	/* Custom Scrollbar */
	.messages-container::-webkit-scrollbar {
		width: 2px;
	}
	
	.messages-container::-webkit-scrollbar-track {
		background: transparent;
	}
	
	.messages-container::-webkit-scrollbar-thumb {
		background: rgba(255, 255, 255, 0.2);
		border-radius: 2px;
	}
	
	.messages-container::-webkit-scrollbar-thumb:hover {
		background: rgba(255, 255, 255, 0.3);
	}

	.hidden {
		display: none !important;
	}
</style>

---
interface Service {
  id: string;
  title: string;
  price: string;
  description: string;
  features: string[];
  icon: string;
}

interface Props {
  services: Service[];
  showGradients?: boolean;
  enableArrowNavigation?: boolean;
  className?: string;
}

const {
  services = [],
  showGradients = true,
  enableArrowNavigation = true,
  className = '',
} = Astro.props;
---

<div class={`animated-list-container ${className}`}>
  <div class="animated-list" id="animated-list">
    {services.map((service, index) => (
      <div 
        class="animated-item"
        data-index={index}
        data-service-id={service.id}
        data-delay={index * 0.1}
      >
        <div class="service-item">
          <span class="service-icon">{service.icon}</span>
          <span class="service-title">{service.title}</span>
          <span class="service-arrow">â†’</span>
        </div>
      </div>
    ))}
  </div>
  
  {showGradients && (
    <>
      <div class="top-gradient" id="top-gradient"></div>
      <div class="bottom-gradient" id="bottom-gradient"></div>
    </>
  )}
</div>

<style>
  .animated-list-container {
    position: relative;
    width: 100%;
    height: 400px;
    overflow: hidden;
    border-radius: 16px;
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .animated-list {
    height: 100%;
    overflow-y: auto;
    padding: 1.5rem;
    scroll-behavior: smooth;
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
  }

  .animated-list::-webkit-scrollbar {
    width: 6px;
  }

  .animated-list::-webkit-scrollbar-track {
    background: transparent;
  }

  .animated-list::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
  }

  .animated-list::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  .animated-item {
    margin-bottom: 1rem;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .animated-item.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .animated-item:last-child {
    margin-bottom: 0;
  }

  .service-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.25rem 1.5rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .service-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), transparent);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .animated-item:hover .service-item {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .animated-item:hover .service-item::before {
    opacity: 1;
  }

  .service-icon {
    font-size: 1.5rem;
    color: white;
    font-family: 'Inter', monospace;
    transition: transform 0.3s ease;
    flex-shrink: 0;
  }

  .animated-item:hover .service-icon {
    transform: rotate(15deg) scale(1.1);
  }

  .service-title {
    flex: 1;
    font-size: 1.125rem;
    font-weight: 500;
    color: white;
    font-family: 'Inter', sans-serif;
    position: relative;
    z-index: 1;
  }

  .service-arrow {
    font-size: 1.25rem;
    color: rgba(255, 255, 255, 0.5);
    transition: all 0.3s ease;
    flex-shrink: 0;
  }

  .animated-item:hover .service-arrow {
    color: white;
    transform: translateX(4px);
  }

  .top-gradient,
  .bottom-gradient {
    position: absolute;
    left: 0;
    right: 0;
    height: 30px;
    pointer-events: none;
    transition: opacity 0.3s ease;
    z-index: 10;
  }

  .top-gradient {
    top: 0;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.8), transparent);
    opacity: 0;
  }

  .bottom-gradient {
    bottom: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
    opacity: 1;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .animated-list-container {
      max-width: 100%;
      height: 350px;
    }

    .animated-list {
      padding: 1rem;
    }

    .service-item {
      padding: 1rem;
    }

    .service-title {
      font-size: 1rem;
    }

    .service-icon {
      font-size: 1.25rem;
    }

    .service-arrow {
      font-size: 1.125rem;
    }
  }

  @media (max-width: 480px) {
    .animated-list-container {
      height: 300px;
    }

    .service-item {
      padding: 0.875rem;
    }

    .service-title {
      font-size: 0.9375rem;
    }
  }
</style>

<script>
  class AnimatedList {
    private listContainer: HTMLElement | null;
    private topGradient: HTMLElement | null;
    private bottomGradient: HTMLElement | null;
    private items: HTMLElement[];
    private selectedIndex: number;
    private keyboardNav: boolean;

    constructor() {
      this.listContainer = document.getElementById('animated-list');
      this.topGradient = document.getElementById('top-gradient');
      this.bottomGradient = document.getElementById('bottom-gradient');
      this.items = Array.from(document.querySelectorAll('.animated-item'));
      this.selectedIndex = -1;
      this.keyboardNav = false;

      this.init();
    }

    init() {
      if (!this.listContainer) return;

      // Setup scroll handler
      this.listContainer.addEventListener('scroll', (e) => this.handleScroll(e));

      // Setup item interactions
      this.items.forEach((item, index) => {
        // Mouse enter
        item.addEventListener('mouseenter', () => {
          this.setSelectedIndex(index);
        });

        // Click
        item.addEventListener('click', () => {
          this.setSelectedIndex(index);
          const serviceId = item.dataset.serviceId;
          if (serviceId) {
            window.dispatchEvent(new CustomEvent('serviceSelected', {
              detail: { serviceId, index }
            }));
          }
        });
      });

      // Setup keyboard navigation
      if (this.listContainer.dataset.enableArrowNavigation !== 'false') {
        this.setupKeyboardNavigation();
      }

      // Setup intersection observer for animations
      this.setupIntersectionObserver();

      // Initial scroll check
      this.handleScroll({ target: this.listContainer } as Event);
    }

    setSelectedIndex(index: number) {
      // Remove previous selection
      this.items.forEach(item => item.classList.remove('selected'));
      
      // Set new selection
      if (index >= 0 && index < this.items.length) {
        this.selectedIndex = index;
        this.items[index].classList.add('selected');
      }
    }

    handleScroll(e: Event) {
      if (!this.topGradient || !this.bottomGradient) return;

      const target = e.target as HTMLElement;
      const { scrollTop, scrollHeight, clientHeight } = target;
      
      // Top gradient opacity
      const topOpacity = Math.min(scrollTop / 30, 1);
      this.topGradient.style.opacity = topOpacity.toString();
      
      // Bottom gradient opacity
      const bottomDistance = scrollHeight - (scrollTop + clientHeight);
      const bottomOpacity = scrollHeight <= clientHeight ? 0 : Math.min(bottomDistance / 30, 1);
      this.bottomGradient.style.opacity = bottomOpacity.toString();
    }

    setupKeyboardNavigation() {
      const handleKeyDown = (e: KeyboardEvent) => {
        if (e.key === 'ArrowDown' || (e.key === 'Tab' && !e.shiftKey)) {
          e.preventDefault();
          this.keyboardNav = true;
          this.setSelectedIndex(Math.min(this.selectedIndex + 1, this.items.length - 1));
          this.scrollToSelected();
        } else if (e.key === 'ArrowUp' || (e.key === 'Tab' && e.shiftKey)) {
          e.preventDefault();
          this.keyboardNav = true;
          this.setSelectedIndex(Math.max(this.selectedIndex - 1, 0));
          this.scrollToSelected();
        } else if (e.key === 'Enter') {
          if (this.selectedIndex >= 0 && this.selectedIndex < this.items.length) {
            e.preventDefault();
            this.items[this.selectedIndex].click();
          }
        }
      };

      window.addEventListener('keydown', handleKeyDown);
    }

    scrollToSelected() {
      if (!this.keyboardNav || this.selectedIndex < 0 || !this.listContainer) return;

      const selectedItem = this.items[this.selectedIndex];
      if (selectedItem) {
        const extraMargin = 50;
        const containerScrollTop = this.listContainer.scrollTop;
        const containerHeight = this.listContainer.clientHeight;
        const itemTop = selectedItem.offsetTop;
        const itemBottom = itemTop + selectedItem.offsetHeight;

        if (itemTop < containerScrollTop + extraMargin) {
          this.listContainer.scrollTo({ 
            top: itemTop - extraMargin, 
            behavior: 'smooth' 
          });
        } else if (itemBottom > containerScrollTop + containerHeight - extraMargin) {
          this.listContainer.scrollTo({
            top: itemBottom - containerHeight + extraMargin,
            behavior: 'smooth',
          });
        }
      }
      this.keyboardNav = false;
    }

    setupIntersectionObserver() {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const item = entry.target as HTMLElement;
            const delay = parseFloat(item.dataset.delay || '0');
            
            setTimeout(() => {
              item.classList.add('visible');
            }, delay * 1000);
          }
        });
      }, {
        root: this.listContainer,
        threshold: 0.1
      });

      this.items.forEach(item => {
        observer.observe(item);
      });
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new AnimatedList();
  });
</script> 
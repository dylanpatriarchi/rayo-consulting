---
interface Props {
  width?: number;
  height?: number;
  cardDistance?: number;
  verticalDistance?: number;
  delay?: number;
  pauseOnHover?: boolean;
  autoPlay?: boolean;
  skewAmount?: number;
  easing?: "elastic" | "power";
  projects?: Array<{
    id: string;
    title: string;
    description: string;
    video?: string;
    img?: string;
    link?: string;
  }>;
}

const {
  width = 500,
  height = 400,
  cardDistance = 60,
  verticalDistance = 70,
  delay = 5000,
  pauseOnHover = false,
  autoPlay = false,
  skewAmount = 6,
  easing = "elastic",
  projects = []
} = Astro.props;
---

<div 
  class="card-swap-container"
  data-width={width}
  data-height={height}
  data-card-distance={cardDistance}
  data-vertical-distance={verticalDistance}
  data-delay={delay}
  data-pause-on-hover={pauseOnHover}
  data-auto-play={autoPlay}
  data-skew-amount={skewAmount}
  data-easing={easing}
>
  {projects.map((project, index) => (
    <div 
      class="card-swap-card"
      data-card-index={index}
      data-project-id={project.id}
      data-project-link={project.link}
    >
      <div class="card-content">
        {project.video ? (
          <video 
            autoplay 
            muted 
            loop 
            playsinline
            class="card-media"
          >
            <source src={project.video} type="video/webm" />
          </video>
        ) : project.img ? (
          <img 
            src={project.img} 
            alt={project.title}
            class="card-media"
          />
        ) : (
          <div class="card-placeholder">
            <span class="project-initial">{project.title.charAt(0)}</span>
          </div>
        )}
        
        <div class="card-info">
          <h3 class="card-title">{project.title}</h3>
          <p class="card-description">{project.description}</p>
        </div>
      </div>
    </div>
  ))}
</div>

<style>
  .card-swap-container {
    position: relative;
    left: 50%;
    transform: translateX(-50%);
    transform-origin: center center;
    perspective: 900px;
    overflow: visible;
    margin: 0 auto;
  }

  .card-swap-card {
    position: absolute;
    top: 50%;
    left: 50%;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(10px);
    transform-style: preserve-3d;
    will-change: transform;
    backface-visibility: hidden;
    cursor: pointer;
    overflow: hidden;
  }

  .card-content {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .card-media {
    width: 100%;
    height: 70%;
    object-fit: cover;
  }

  .card-placeholder {
    width: 100%;
    height: 70%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.05);
  }

  .project-initial {
    font-size: 4rem;
    font-weight: bold;
    color: rgba(255, 255, 255, 0.2);
    font-family: 'Inter', sans-serif;
  }

  .card-info {
    padding: 1rem;
    height: 30%;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .card-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: white;
    margin: 0 0 0.5rem 0;
    line-height: 1.2;
    font-family: 'Inter', sans-serif;
  }

  .card-description {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.7);
    margin: 0;
    line-height: 1.4;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    font-family: 'Inter', sans-serif;
  }

  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .card-swap-container {
      transform: translateX(-50%) scale(0.9);
    }
  }

  @media (max-width: 768px) {
    .card-swap-container {
      transform: translateX(-50%) scale(0.75);
    }
    
    .card-title {
      font-size: 1rem;
    }
    
    .card-description {
      font-size: 0.75rem;
    }
    
    .card-info {
      padding: 0.875rem;
    }
  }

  @media (max-width: 480px) {
    .card-swap-container {
      transform: translateX(-50%) scale(0.65);
    }
    
    .card-title {
      font-size: 0.9rem;
    }
    
    .card-description {
      font-size: 0.7rem;
      -webkit-line-clamp: 1;
    }
    
    .card-info {
      padding: 0.75rem;
    }
    
    .project-initial {
      font-size: 3rem;
    }
  }

  @media (max-width: 360px) {
    .card-swap-container {
      transform: translateX(-50%) scale(0.55);
    }
  }
</style>

<script>
  import { gsap } from "gsap";

  class CardSwap {
    constructor(container) {
      this.container = container;
      this.cards = Array.from(container.querySelectorAll('.card-swap-card'));
      this.refs = this.cards.map(card => card);
      this.order = Array.from({ length: this.cards.length }, (_, i) => i);
      this.tlRef = null;
      this.intervalRef = null;
      
      // Get configuration from data attributes
      this.config = {
        width: parseInt(container.dataset.width) || 500,
        height: parseInt(container.dataset.height) || 400,
        cardDistance: parseInt(container.dataset.cardDistance) || 60,
        verticalDistance: parseInt(container.dataset.verticalDistance) || 70,
        delay: parseInt(container.dataset.delay) || 5000,
        pauseOnHover: container.dataset.pauseOnHover === 'true',
        autoPlay: container.dataset.autoPlay === 'true',
        skewAmount: parseInt(container.dataset.skewAmount) || 6,
        easing: container.dataset.easing || 'elastic'
      };

      // Animation configuration
      this.animConfig = this.config.easing === "elastic" ? {
        ease: "elastic.out(0.6,0.9)",
        durDrop: 2,
        durMove: 2,
        durReturn: 2,
        promoteOverlap: 0.9,
        returnDelay: 0.05,
      } : {
        ease: "power1.inOut",
        durDrop: 0.8,
        durMove: 0.8,
        durReturn: 0.8,
        promoteOverlap: 0.45,
        returnDelay: 0.2,
      };

      this.init();
    }

    makeSlot(i, distX, distY, total) {
      return {
        x: i * distX,
        y: -i * distY,
        z: -i * distX * 1.5,
        zIndex: total - i,
      };
    }

    placeNow(el, slot, skew) {
      gsap.set(el, {
        x: slot.x,
        y: slot.y,
        z: slot.z,
        xPercent: -50,
        yPercent: -50,
        skewY: skew,
        transformOrigin: "center center",
        zIndex: slot.zIndex,
        force3D: true,
        width: this.config.width,
        height: this.config.height,
      });
    }

    swap() {
      if (this.order.length < 2) return;

      const [front, ...rest] = this.order;
      const elFront = this.refs[front];
      const tl = gsap.timeline();
      this.tlRef = tl;

      // Drop front card
      tl.to(elFront, {
        y: "+=500",
        duration: this.animConfig.durDrop,
        ease: this.animConfig.ease,
      });

      // Promote other cards
      tl.addLabel("promote", `-=${this.animConfig.durDrop * this.animConfig.promoteOverlap}`);
      rest.forEach((idx, i) => {
        const el = this.refs[idx];
        const slot = this.makeSlot(i, this.config.cardDistance, this.config.verticalDistance, this.refs.length);
        tl.set(el, { zIndex: slot.zIndex }, "promote");
        tl.to(
          el,
          {
            x: slot.x,
            y: slot.y,
            z: slot.z,
            duration: this.animConfig.durMove,
            ease: this.animConfig.ease,
          },
          `promote+=${i * 0.15}`
        );
      });

      // Return front card to back
      const backSlot = this.makeSlot(
        this.refs.length - 1,
        this.config.cardDistance,
        this.config.verticalDistance,
        this.refs.length
      );
      tl.addLabel("return", `promote+=${this.animConfig.durMove * this.animConfig.returnDelay}`);
      tl.call(
        () => {
          gsap.set(elFront, { zIndex: backSlot.zIndex });
        },
        undefined,
        "return"
      );
      tl.set(elFront, { x: backSlot.x, z: backSlot.z }, "return");
      tl.to(
        elFront,
        {
          y: backSlot.y,
          duration: this.animConfig.durReturn,
          ease: this.animConfig.ease,
        },
        "return"
      );

      // Update order
      tl.call(() => {
        this.order = [...rest, front];
      });
    }

    init() {
      // Set container dimensions
      this.container.style.width = `${this.config.width}px`;
      this.container.style.height = `${this.config.height}px`;

      // Initial placement
      const total = this.refs.length;
      this.refs.forEach((card, i) => {
        this.placeNow(
          card,
          this.makeSlot(i, this.config.cardDistance, this.config.verticalDistance, total),
          this.config.skewAmount
        );
      });

      // Start animation cycle only if autoPlay is enabled
      if (this.config.autoPlay) {
        this.swap();
        this.intervalRef = setInterval(() => this.swap(), this.config.delay);
      }

      // Add hover pause functionality
      if (this.config.pauseOnHover) {
        this.container.addEventListener('mouseenter', () => {
          this.tlRef?.pause();
          clearInterval(this.intervalRef);
        });

        this.container.addEventListener('mouseleave', () => {
          this.tlRef?.play();
          this.intervalRef = setInterval(() => this.swap(), this.config.delay);
        });
      }

      // Add click handlers for cards
      this.cards.forEach(card => {
        card.addEventListener('click', () => {
          const link = card.dataset.projectLink;
          if (link && link !== '#') {
            if (link.startsWith('http')) {
              window.open(link, '_blank', 'noopener');
            } else {
              window.location.href = link;
            }
          }
        });
      });

      // Add swipe controls
      this.addSwipeControls();
    }

    addSwipeControls() {
      let startX = 0;
      let startY = 0;
      let isSwipe = false;

      this.container.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        isSwipe = false;
      });

      this.container.addEventListener('touchmove', (e) => {
        e.preventDefault();
        isSwipe = true;
      });

      this.container.addEventListener('touchend', (e) => {
        if (!isSwipe) return;

        const endX = e.changedTouches[0].clientX;
        const endY = e.changedTouches[0].clientY;
        const deltaX = endX - startX;
        const deltaY = endY - startY;

        // Check if horizontal swipe is stronger than vertical
        if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
          if (deltaX > 0) {
            // Swipe right - go to previous
            this.swap();
          } else {
            // Swipe left - go to next
            this.swap();
          }
        }
      });

      // Add keyboard controls
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
          this.swap();
        }
      });
    }

    destroy() {
      if (this.intervalRef) {
        clearInterval(this.intervalRef);
      }
      if (this.tlRef) {
        this.tlRef.kill();
      }
    }
  }

  // Initialize CardSwap instances
  document.addEventListener('DOMContentLoaded', () => {
    const containers = document.querySelectorAll('.card-swap-container');
    containers.forEach(container => {
      new CardSwap(container);
    });
  });
</script> 
---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import { languages } from "@i18n/ui";
import { getLangFromUrl, getUrlWithoutLang, useTranslations, useTranslatedPath } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const path = getUrlWithoutLang(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

let pages = [
	{
		id: "home",
		initialTitle: "H",
		title: "Home",
		class: "home",
		url: "/",
	},
	{
		id: "projects",
		initialTitle: "P",
		title: t("projects"),
		class: "projects",
		url: "/projects",
	},
	{
		id: "services",
		initialTitle: "S",
		title: t("services"),
		class: "services",
		url: "/services",
	},
	{
		id: "work",
		initialTitle: "W",
		title: t("work.nav"),
		class: "work",
		url: "/work-with-us",
	},
	{
		id: "contact",
		initialTitle: "C",
		title: t("contacts"),
		class: "contact",
		url: "/contact/",
	},
	{
		id: "language",
		initialTitle: lang.toUpperCase(),
		title: lang.toUpperCase(),
		class: "language",
		url: translatePath(path, `${lang === "it" ? "en" : "it"}`),
		isLanguage: true,
	},
];

const { pathname } = Astro.url;
---

<header class="header flex justify-center items-center gap-8 md:gap-12 lg:gap-16 w-full">
	{
		pages.map((page) => (
			<div class={`menu-item ${page.class}`} data-item-id={page.id}>
				{page.isLanguage ? (
					<a
						href={page.url}
						data-title={page.title}
						class="flex h-full items-center justify-center py-3 px-2 border border-gray-600 hover:border-white bg-white text-black font-mono text-xs font-bold uppercase sm:text-base md:text-xl transition-colors">
						{page.title}
					</a>
				) : (
					<a
						href={translatePath(page.url)}
						data-title={page.title}
						class="flex h-full items-center justify-center py-3 font-mono text-xs font-bold uppercase sm:text-base md:text-xl">
						{page.title}
					</a>
				)}
			</div>
		))
	}
</header>

<style>
	header.header {
		mix-blend-mode: exclusion;
		height: auto;
		position: fixed;
		z-index: 99;
		top: 0;
		left: 0;
		right: 0;
		padding: 1rem;
	}
</style>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import { ScrambleTextPlugin } from "gsap/ScrambleTextPlugin";

	gsap.registerPlugin(ScrollTrigger, ScrambleTextPlugin);

	function init() {
		const homeScrambleTl = gsap
			.timeline({
				defaults: {
					duration: 0.8,
					ease: "power4.inOut",
				},
			})
			.from("header .menu-item.home a", {
				scrambleText: {
					text: "H",
					speed: 0.4,
				},
			});

		const projectsScrambleTl = gsap
			.timeline({
				defaults: {
					duration: 0.8,
					ease: "power4.inOut",
				},
			})
			.from("header .menu-item.projects a", {
				scrambleText: {
					text: "P",
					speed: 0.4,
				},
			});

		const servicesScrambleTl = gsap
			.timeline({
				defaults: {
					duration: 0.8,
					ease: "power4.inOut",
				},
			})
			.from("header .menu-item.services a", {
				scrambleText: {
					text: "S",
					speed: 0.4,
				},
			});

		const workScrambleTl = gsap
			.timeline({
				defaults: {
					duration: 0.8,
					ease: "power4.inOut",
				},
			})
			.from("header .menu-item.work a", {
				scrambleText: {
					text: "W",
					speed: 0.4,
				},
			});

		const contactScrambleTl = gsap
			.timeline({
				defaults: {
					duration: 0.8,
					ease: "power4.inOut",
				},
			})
			.from("header .menu-item.contact a", {
				scrambleText: {
					text: "C",
					speed: 0.4,
				},
			});

		const languageScrambleTl = gsap
			.timeline({
				defaults: {
					duration: 0.8,
					ease: "power4.inOut",
				},
			})
			.from("header .menu-item.language a", {
				scrambleText: {
					text: document.querySelector("header .menu-item.language a")?.textContent || "EN",
					speed: 0.4,
				},
			});

		const headerScrambleTl = gsap
			.timeline()
			.add(homeScrambleTl)
			.add(projectsScrambleTl, "<=+0.2")
			.add(servicesScrambleTl, "<=+0.2")
			.add(workScrambleTl, "<=+0.2")
			.add(contactScrambleTl, "<=+0.2")
			.add(languageScrambleTl, "<=+0.2");

		ScrollTrigger.create({
			start: "top top",
			end: "max",
			onUpdate: (self) => {
				self.direction === -1 ? headerScrambleTl.timeScale(1).play() : headerScrambleTl.timeScale(1.5).reverse();
			},
		});

		// On mouse hover if the text is scramble unscramble it
	}

	document.removeEventListener("DOMContentLoaded", init); // astro:page-load
	document.addEventListener("DOMContentLoaded", init); // astro:page-load
</script>
